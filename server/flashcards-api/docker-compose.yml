version: '3.8'

services:
  flashcards-api:
    build: .
    container_name: flashcards-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_TYPE=mongodb
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DB_NAME=flashcards
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SERPAPI_KEY=${SERPAPI_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    volumes:
      - ./data:/app/data
    networks:
      - flashcards-network
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB for production
  mongodb:
    image: mongo:7.0
    container_name: flashcards-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=flashcards
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - flashcards-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add PostgreSQL for production
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: flashcards-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=flashcards
  #     - POSTGRES_USER=${POSTGRES_USER:-flashcards_user}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - flashcards-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flashcards_user}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Optional: Add Redis for caching
  # redis:
  #   image: redis:7-alpine
  #   container_name: flashcards-redis
  #   restart: unless-stopped
  #   networks:
  #     - flashcards-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  flashcards-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
